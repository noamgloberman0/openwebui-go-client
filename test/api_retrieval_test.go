/*
FastAPI

Testing RetrievalAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_RetrievalAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RetrievalAPIService DeleteEntriesFromCollectionApiV1RetrievalDeletePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RetrievalAPI.DeleteEntriesFromCollectionApiV1RetrievalDeletePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RetrievalAPIService GetEmbeddingConfigApiV1RetrievalEmbeddingGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RetrievalAPI.GetEmbeddingConfigApiV1RetrievalEmbeddingGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RetrievalAPIService GetEmbeddingsApiV1RetrievalEfTextGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var text string

		resp, httpRes, err := apiClient.RetrievalAPI.GetEmbeddingsApiV1RetrievalEfTextGet(context.Background(), text).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RetrievalAPIService GetQuerySettingsApiV1RetrievalQuerySettingsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RetrievalAPI.GetQuerySettingsApiV1RetrievalQuerySettingsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RetrievalAPIService GetRagConfigApiV1RetrievalConfigGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RetrievalAPI.GetRagConfigApiV1RetrievalConfigGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RetrievalAPIService GetRagTemplateApiV1RetrievalTemplateGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RetrievalAPI.GetRagTemplateApiV1RetrievalTemplateGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RetrievalAPIService GetReraankingConfigApiV1RetrievalRerankingGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RetrievalAPI.GetReraankingConfigApiV1RetrievalRerankingGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RetrievalAPIService GetStatusApiV1RetrievalGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RetrievalAPI.GetStatusApiV1RetrievalGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RetrievalAPIService ProcessFileApiV1RetrievalProcessFilePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RetrievalAPI.ProcessFileApiV1RetrievalProcessFilePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RetrievalAPIService ProcessFilesBatchApiV1RetrievalProcessFilesBatchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RetrievalAPI.ProcessFilesBatchApiV1RetrievalProcessFilesBatchPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RetrievalAPIService ProcessTextApiV1RetrievalProcessTextPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RetrievalAPI.ProcessTextApiV1RetrievalProcessTextPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RetrievalAPIService ProcessWebApiV1RetrievalProcessWebPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RetrievalAPI.ProcessWebApiV1RetrievalProcessWebPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RetrievalAPIService ProcessWebSearchApiV1RetrievalProcessWebSearchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RetrievalAPI.ProcessWebSearchApiV1RetrievalProcessWebSearchPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RetrievalAPIService ProcessYoutubeVideoApiV1RetrievalProcessYoutubePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RetrievalAPI.ProcessYoutubeVideoApiV1RetrievalProcessYoutubePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RetrievalAPIService QueryCollectionHandlerApiV1RetrievalQueryCollectionPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RetrievalAPI.QueryCollectionHandlerApiV1RetrievalQueryCollectionPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RetrievalAPIService QueryDocHandlerApiV1RetrievalQueryDocPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RetrievalAPI.QueryDocHandlerApiV1RetrievalQueryDocPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RetrievalAPIService ResetUploadDirApiV1RetrievalResetUploadsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RetrievalAPI.ResetUploadDirApiV1RetrievalResetUploadsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RetrievalAPIService ResetVectorDbApiV1RetrievalResetDbPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RetrievalAPI.ResetVectorDbApiV1RetrievalResetDbPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RetrievalAPIService UpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RetrievalAPI.UpdateEmbeddingConfigApiV1RetrievalEmbeddingUpdatePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RetrievalAPIService UpdateQuerySettingsApiV1RetrievalQuerySettingsUpdatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RetrievalAPI.UpdateQuerySettingsApiV1RetrievalQuerySettingsUpdatePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RetrievalAPIService UpdateRagConfigApiV1RetrievalConfigUpdatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RetrievalAPI.UpdateRagConfigApiV1RetrievalConfigUpdatePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RetrievalAPIService UpdateRerankingConfigApiV1RetrievalRerankingUpdatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RetrievalAPI.UpdateRerankingConfigApiV1RetrievalRerankingUpdatePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
