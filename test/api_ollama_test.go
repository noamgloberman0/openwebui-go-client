/*
FastAPI

Testing OllamaAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_OllamaAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OllamaAPIService CopyModelOllamaApiCopyPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OllamaAPI.CopyModelOllamaApiCopyPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService CopyModelOllamaApiCopyUrlIdxPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var urlIdx int32

		resp, httpRes, err := apiClient.OllamaAPI.CopyModelOllamaApiCopyUrlIdxPost(context.Background(), urlIdx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService CreateModelOllamaApiCreatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OllamaAPI.CreateModelOllamaApiCreatePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService CreateModelOllamaApiCreateUrlIdxPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var urlIdx int32

		resp, httpRes, err := apiClient.OllamaAPI.CreateModelOllamaApiCreateUrlIdxPost(context.Background(), urlIdx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService DeleteModelOllamaApiDeleteDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OllamaAPI.DeleteModelOllamaApiDeleteDelete(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService DeleteModelOllamaApiDeleteUrlIdxDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var urlIdx int32

		resp, httpRes, err := apiClient.OllamaAPI.DeleteModelOllamaApiDeleteUrlIdxDelete(context.Background(), urlIdx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService DownloadModelOllamaModelsDownloadPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OllamaAPI.DownloadModelOllamaModelsDownloadPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService DownloadModelOllamaModelsDownloadUrlIdxPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var urlIdx int32

		resp, httpRes, err := apiClient.OllamaAPI.DownloadModelOllamaModelsDownloadUrlIdxPost(context.Background(), urlIdx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService EmbedOllamaApiEmbedPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OllamaAPI.EmbedOllamaApiEmbedPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService EmbedOllamaApiEmbedUrlIdxPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var urlIdx int32

		resp, httpRes, err := apiClient.OllamaAPI.EmbedOllamaApiEmbedUrlIdxPost(context.Background(), urlIdx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService EmbeddingsOllamaApiEmbeddingsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OllamaAPI.EmbeddingsOllamaApiEmbeddingsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService EmbeddingsOllamaApiEmbeddingsUrlIdxPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var urlIdx int32

		resp, httpRes, err := apiClient.OllamaAPI.EmbeddingsOllamaApiEmbeddingsUrlIdxPost(context.Background(), urlIdx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService GenerateChatCompletionOllamaApiChatPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OllamaAPI.GenerateChatCompletionOllamaApiChatPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService GenerateChatCompletionOllamaApiChatUrlIdxPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var urlIdx int32

		resp, httpRes, err := apiClient.OllamaAPI.GenerateChatCompletionOllamaApiChatUrlIdxPost(context.Background(), urlIdx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService GenerateCompletionOllamaApiGeneratePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OllamaAPI.GenerateCompletionOllamaApiGeneratePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService GenerateCompletionOllamaApiGenerateUrlIdxPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var urlIdx int32

		resp, httpRes, err := apiClient.OllamaAPI.GenerateCompletionOllamaApiGenerateUrlIdxPost(context.Background(), urlIdx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService GenerateOpenaiChatCompletionOllamaV1ChatCompletionsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OllamaAPI.GenerateOpenaiChatCompletionOllamaV1ChatCompletionsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService GenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var urlIdx int32

		resp, httpRes, err := apiClient.OllamaAPI.GenerateOpenaiChatCompletionOllamaV1ChatCompletionsUrlIdxPost(context.Background(), urlIdx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService GenerateOpenaiCompletionOllamaV1CompletionsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OllamaAPI.GenerateOpenaiCompletionOllamaV1CompletionsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService GenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var urlIdx int32

		resp, httpRes, err := apiClient.OllamaAPI.GenerateOpenaiCompletionOllamaV1CompletionsUrlIdxPost(context.Background(), urlIdx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService GetConfigOllamaConfigGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OllamaAPI.GetConfigOllamaConfigGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService GetOllamaLoadedModelsOllamaApiPsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OllamaAPI.GetOllamaLoadedModelsOllamaApiPsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService GetOllamaTagsOllamaApiTagsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OllamaAPI.GetOllamaTagsOllamaApiTagsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService GetOllamaTagsOllamaApiTagsUrlIdxGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var urlIdx int32

		resp, httpRes, err := apiClient.OllamaAPI.GetOllamaTagsOllamaApiTagsUrlIdxGet(context.Background(), urlIdx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService GetOllamaVersionsOllamaApiVersionGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OllamaAPI.GetOllamaVersionsOllamaApiVersionGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService GetOllamaVersionsOllamaApiVersionUrlIdxGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var urlIdx int32

		resp, httpRes, err := apiClient.OllamaAPI.GetOllamaVersionsOllamaApiVersionUrlIdxGet(context.Background(), urlIdx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService GetOpenaiModelsOllamaV1ModelsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OllamaAPI.GetOpenaiModelsOllamaV1ModelsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService GetOpenaiModelsOllamaV1ModelsUrlIdxGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var urlIdx int32

		resp, httpRes, err := apiClient.OllamaAPI.GetOpenaiModelsOllamaV1ModelsUrlIdxGet(context.Background(), urlIdx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService GetStatusOllamaGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OllamaAPI.GetStatusOllamaGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService GetStatusOllamaHead", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OllamaAPI.GetStatusOllamaHead(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService PullModelOllamaApiPullPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OllamaAPI.PullModelOllamaApiPullPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService PullModelOllamaApiPullUrlIdxPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var urlIdx int32

		resp, httpRes, err := apiClient.OllamaAPI.PullModelOllamaApiPullUrlIdxPost(context.Background(), urlIdx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService PushModelOllamaApiPushDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OllamaAPI.PushModelOllamaApiPushDelete(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService PushModelOllamaApiPushUrlIdxDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var urlIdx int32

		resp, httpRes, err := apiClient.OllamaAPI.PushModelOllamaApiPushUrlIdxDelete(context.Background(), urlIdx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService ShowModelInfoOllamaApiShowPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OllamaAPI.ShowModelInfoOllamaApiShowPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService UpdateConfigOllamaConfigUpdatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OllamaAPI.UpdateConfigOllamaConfigUpdatePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService UploadModelOllamaModelsUploadPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OllamaAPI.UploadModelOllamaModelsUploadPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService UploadModelOllamaModelsUploadUrlIdxPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var urlIdx int32

		resp, httpRes, err := apiClient.OllamaAPI.UploadModelOllamaModelsUploadUrlIdxPost(context.Background(), urlIdx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OllamaAPIService VerifyConnectionOllamaVerifyPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OllamaAPI.VerifyConnectionOllamaVerifyPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
