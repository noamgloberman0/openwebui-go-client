/*
FastAPI

Testing ChannelsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ChannelsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ChannelsAPIService AddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var messageId string

		resp, httpRes, err := apiClient.ChannelsAPI.AddReactionToMessageApiV1ChannelsIdMessagesMessageIdReactionsAddPost(context.Background(), id, messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService CreateNewChannelApiV1ChannelsCreatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelsAPI.CreateNewChannelApiV1ChannelsCreatePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService DeleteChannelByIdApiV1ChannelsIdDeleteDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ChannelsAPI.DeleteChannelByIdApiV1ChannelsIdDeleteDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService DeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var messageId string

		resp, httpRes, err := apiClient.ChannelsAPI.DeleteMessageByIdApiV1ChannelsIdMessagesMessageIdDeleteDelete(context.Background(), id, messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService GetChannelByIdApiV1ChannelsIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ChannelsAPI.GetChannelByIdApiV1ChannelsIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService GetChannelMessageApiV1ChannelsIdMessagesMessageIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var messageId string

		resp, httpRes, err := apiClient.ChannelsAPI.GetChannelMessageApiV1ChannelsIdMessagesMessageIdGet(context.Background(), id, messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService GetChannelMessagesApiV1ChannelsIdMessagesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ChannelsAPI.GetChannelMessagesApiV1ChannelsIdMessagesGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService GetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var messageId string

		resp, httpRes, err := apiClient.ChannelsAPI.GetChannelThreadMessagesApiV1ChannelsIdMessagesMessageIdThreadGet(context.Background(), id, messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService GetChannelsApiV1ChannelsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChannelsAPI.GetChannelsApiV1ChannelsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService PostNewMessageApiV1ChannelsIdMessagesPostPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ChannelsAPI.PostNewMessageApiV1ChannelsIdMessagesPostPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService RemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var messageId string

		resp, httpRes, err := apiClient.ChannelsAPI.RemoveReactionByIdAndUserIdAndNameApiV1ChannelsIdMessagesMessageIdReactionsRemovePost(context.Background(), id, messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService UpdateChannelByIdApiV1ChannelsIdUpdatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ChannelsAPI.UpdateChannelByIdApiV1ChannelsIdUpdatePost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChannelsAPIService UpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var messageId string

		resp, httpRes, err := apiClient.ChannelsAPI.UpdateMessageByIdApiV1ChannelsIdMessagesMessageIdUpdatePost(context.Background(), id, messageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
