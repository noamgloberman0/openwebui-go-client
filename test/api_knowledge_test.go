/*
FastAPI

Testing KnowledgeAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_KnowledgeAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test KnowledgeAPIService AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.KnowledgeAPI.AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeAPIService AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.KnowledgeAPI.AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeAPIService CreateNewKnowledgeApiV1KnowledgeCreatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.KnowledgeAPI.CreateNewKnowledgeApiV1KnowledgeCreatePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeAPIService DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.KnowledgeAPI.DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeAPIService GetKnowledgeApiV1KnowledgeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.KnowledgeAPI.GetKnowledgeApiV1KnowledgeGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeAPIService GetKnowledgeByIdApiV1KnowledgeIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.KnowledgeAPI.GetKnowledgeByIdApiV1KnowledgeIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeAPIService GetKnowledgeListApiV1KnowledgeListGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.KnowledgeAPI.GetKnowledgeListApiV1KnowledgeListGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeAPIService RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.KnowledgeAPI.RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeAPIService ResetKnowledgeByIdApiV1KnowledgeIdResetPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.KnowledgeAPI.ResetKnowledgeByIdApiV1KnowledgeIdResetPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeAPIService UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.KnowledgeAPI.UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeAPIService UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.KnowledgeAPI.UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
