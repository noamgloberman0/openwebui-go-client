/*
FastAPI

Testing PipelinesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_PipelinesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PipelinesAPIService AddPipelineApiV1PipelinesAddPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PipelinesAPI.AddPipelineApiV1PipelinesAddPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesAPIService DeletePipelineApiV1PipelinesDeleteDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PipelinesAPI.DeletePipelineApiV1PipelinesDeleteDelete(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesAPIService GetPipelineValvesApiV1PipelinesPipelineIdValvesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pipelineId string

		resp, httpRes, err := apiClient.PipelinesAPI.GetPipelineValvesApiV1PipelinesPipelineIdValvesGet(context.Background(), pipelineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesAPIService GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pipelineId string

		resp, httpRes, err := apiClient.PipelinesAPI.GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGet(context.Background(), pipelineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesAPIService GetPipelinesApiV1PipelinesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PipelinesAPI.GetPipelinesApiV1PipelinesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesAPIService GetPipelinesListApiV1PipelinesListGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PipelinesAPI.GetPipelinesListApiV1PipelinesListGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesAPIService UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pipelineId string

		resp, httpRes, err := apiClient.PipelinesAPI.UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePost(context.Background(), pipelineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesAPIService UploadPipelineApiV1PipelinesUploadPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PipelinesAPI.UploadPipelineApiV1PipelinesUploadPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
