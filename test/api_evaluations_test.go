/*
FastAPI

Testing EvaluationsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_EvaluationsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EvaluationsAPIService CreateFeedbackApiV1EvaluationsFeedbackPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EvaluationsAPI.CreateFeedbackApiV1EvaluationsFeedbackPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EvaluationsAPIService DeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EvaluationsAPI.DeleteAllFeedbacksApiV1EvaluationsFeedbacksAllDelete(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EvaluationsAPIService DeleteFeedbackByIdApiV1EvaluationsFeedbackIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.EvaluationsAPI.DeleteFeedbackByIdApiV1EvaluationsFeedbackIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EvaluationsAPIService DeleteFeedbacksApiV1EvaluationsFeedbacksDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EvaluationsAPI.DeleteFeedbacksApiV1EvaluationsFeedbacksDelete(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EvaluationsAPIService GetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EvaluationsAPI.GetAllFeedbacksApiV1EvaluationsFeedbacksAllExportGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EvaluationsAPIService GetAllFeedbacksApiV1EvaluationsFeedbacksAllGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EvaluationsAPI.GetAllFeedbacksApiV1EvaluationsFeedbacksAllGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EvaluationsAPIService GetConfigApiV1EvaluationsConfigGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EvaluationsAPI.GetConfigApiV1EvaluationsConfigGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EvaluationsAPIService GetFeedbackByIdApiV1EvaluationsFeedbackIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.EvaluationsAPI.GetFeedbackByIdApiV1EvaluationsFeedbackIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EvaluationsAPIService GetFeedbacksApiV1EvaluationsFeedbacksUserGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EvaluationsAPI.GetFeedbacksApiV1EvaluationsFeedbacksUserGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EvaluationsAPIService UpdateConfigApiV1EvaluationsConfigPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EvaluationsAPI.UpdateConfigApiV1EvaluationsConfigPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EvaluationsAPIService UpdateFeedbackByIdApiV1EvaluationsFeedbackIdPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.EvaluationsAPI.UpdateFeedbackByIdApiV1EvaluationsFeedbackIdPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
