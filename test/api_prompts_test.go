/*
FastAPI

Testing PromptsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_PromptsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PromptsAPIService CreateNewPromptApiV1PromptsCreatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PromptsAPI.CreateNewPromptApiV1PromptsCreatePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PromptsAPIService DeletePromptByCommandApiV1PromptsCommandCommandDeleteDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var command string

		resp, httpRes, err := apiClient.PromptsAPI.DeletePromptByCommandApiV1PromptsCommandCommandDeleteDelete(context.Background(), command).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PromptsAPIService GetPromptByCommandApiV1PromptsCommandCommandGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var command string

		resp, httpRes, err := apiClient.PromptsAPI.GetPromptByCommandApiV1PromptsCommandCommandGet(context.Background(), command).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PromptsAPIService GetPromptListApiV1PromptsListGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PromptsAPI.GetPromptListApiV1PromptsListGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PromptsAPIService GetPromptsApiV1PromptsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PromptsAPI.GetPromptsApiV1PromptsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PromptsAPIService UpdatePromptByCommandApiV1PromptsCommandCommandUpdatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var command string

		resp, httpRes, err := apiClient.PromptsAPI.UpdatePromptByCommandApiV1PromptsCommandCommandUpdatePost(context.Background(), command).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
