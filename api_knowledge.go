/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// KnowledgeAPIService KnowledgeAPI service
type KnowledgeAPIService service

type ApiAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostRequest struct {
	ctx context.Context
	ApiService *KnowledgeAPIService
	id string
	knowledgeFileIdForm *KnowledgeFileIdForm
}

func (r ApiAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostRequest) KnowledgeFileIdForm(knowledgeFileIdForm KnowledgeFileIdForm) ApiAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostRequest {
	r.knowledgeFileIdForm = &knowledgeFileIdForm
	return r
}

func (r ApiAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostRequest) Execute() (*KnowledgeFilesResponse, *http.Response, error) {
	return r.ApiService.AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostExecute(r)
}

/*
AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPost Add File To Knowledge By Id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostRequest
*/
func (a *KnowledgeAPIService) AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPost(ctx context.Context, id string) ApiAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostRequest {
	return ApiAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KnowledgeFilesResponse
func (a *KnowledgeAPIService) AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostExecute(r ApiAddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPostRequest) (*KnowledgeFilesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeFilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeAPIService.AddFileToKnowledgeByIdApiV1KnowledgeIdFileAddPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/knowledge/{id}/file/add"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.knowledgeFileIdForm == nil {
		return localVarReturnValue, nil, reportError("knowledgeFileIdForm is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.knowledgeFileIdForm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostRequest struct {
	ctx context.Context
	ApiService *KnowledgeAPIService
	id string
	knowledgeFileIdForm *[]KnowledgeFileIdForm
}

func (r ApiAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostRequest) KnowledgeFileIdForm(knowledgeFileIdForm []KnowledgeFileIdForm) ApiAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostRequest {
	r.knowledgeFileIdForm = &knowledgeFileIdForm
	return r
}

func (r ApiAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostRequest) Execute() (*KnowledgeFilesResponse, *http.Response, error) {
	return r.ApiService.AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostExecute(r)
}

/*
AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPost Add Files To Knowledge Batch

Add multiple files to a knowledge base

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostRequest
*/
func (a *KnowledgeAPIService) AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPost(ctx context.Context, id string) ApiAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostRequest {
	return ApiAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KnowledgeFilesResponse
func (a *KnowledgeAPIService) AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostExecute(r ApiAddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPostRequest) (*KnowledgeFilesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeFilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeAPIService.AddFilesToKnowledgeBatchApiV1KnowledgeIdFilesBatchAddPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/knowledge/{id}/files/batch/add"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.knowledgeFileIdForm == nil {
		return localVarReturnValue, nil, reportError("knowledgeFileIdForm is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.knowledgeFileIdForm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateNewKnowledgeApiV1KnowledgeCreatePostRequest struct {
	ctx context.Context
	ApiService *KnowledgeAPIService
	knowledgeForm *KnowledgeForm
}

func (r ApiCreateNewKnowledgeApiV1KnowledgeCreatePostRequest) KnowledgeForm(knowledgeForm KnowledgeForm) ApiCreateNewKnowledgeApiV1KnowledgeCreatePostRequest {
	r.knowledgeForm = &knowledgeForm
	return r
}

func (r ApiCreateNewKnowledgeApiV1KnowledgeCreatePostRequest) Execute() (*KnowledgeResponse, *http.Response, error) {
	return r.ApiService.CreateNewKnowledgeApiV1KnowledgeCreatePostExecute(r)
}

/*
CreateNewKnowledgeApiV1KnowledgeCreatePost Create New Knowledge

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateNewKnowledgeApiV1KnowledgeCreatePostRequest
*/
func (a *KnowledgeAPIService) CreateNewKnowledgeApiV1KnowledgeCreatePost(ctx context.Context) ApiCreateNewKnowledgeApiV1KnowledgeCreatePostRequest {
	return ApiCreateNewKnowledgeApiV1KnowledgeCreatePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KnowledgeResponse
func (a *KnowledgeAPIService) CreateNewKnowledgeApiV1KnowledgeCreatePostExecute(r ApiCreateNewKnowledgeApiV1KnowledgeCreatePostRequest) (*KnowledgeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeAPIService.CreateNewKnowledgeApiV1KnowledgeCreatePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/knowledge/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.knowledgeForm == nil {
		return localVarReturnValue, nil, reportError("knowledgeForm is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.knowledgeForm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteRequest struct {
	ctx context.Context
	ApiService *KnowledgeAPIService
	id string
}

func (r ApiDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteExecute(r)
}

/*
DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDelete Delete Knowledge By Id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteRequest
*/
func (a *KnowledgeAPIService) DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDelete(ctx context.Context, id string) ApiDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteRequest {
	return ApiDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return bool
func (a *KnowledgeAPIService) DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteExecute(r ApiDeleteKnowledgeByIdApiV1KnowledgeIdDeleteDeleteRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeAPIService.DeleteKnowledgeByIdApiV1KnowledgeIdDeleteDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/knowledge/{id}/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetKnowledgeApiV1KnowledgeGetRequest struct {
	ctx context.Context
	ApiService *KnowledgeAPIService
}

func (r ApiGetKnowledgeApiV1KnowledgeGetRequest) Execute() ([]KnowledgeUserResponse, *http.Response, error) {
	return r.ApiService.GetKnowledgeApiV1KnowledgeGetExecute(r)
}

/*
GetKnowledgeApiV1KnowledgeGet Get Knowledge

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetKnowledgeApiV1KnowledgeGetRequest
*/
func (a *KnowledgeAPIService) GetKnowledgeApiV1KnowledgeGet(ctx context.Context) ApiGetKnowledgeApiV1KnowledgeGetRequest {
	return ApiGetKnowledgeApiV1KnowledgeGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []KnowledgeUserResponse
func (a *KnowledgeAPIService) GetKnowledgeApiV1KnowledgeGetExecute(r ApiGetKnowledgeApiV1KnowledgeGetRequest) ([]KnowledgeUserResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KnowledgeUserResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeAPIService.GetKnowledgeApiV1KnowledgeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/knowledge/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetKnowledgeByIdApiV1KnowledgeIdGetRequest struct {
	ctx context.Context
	ApiService *KnowledgeAPIService
	id string
}

func (r ApiGetKnowledgeByIdApiV1KnowledgeIdGetRequest) Execute() (*KnowledgeFilesResponse, *http.Response, error) {
	return r.ApiService.GetKnowledgeByIdApiV1KnowledgeIdGetExecute(r)
}

/*
GetKnowledgeByIdApiV1KnowledgeIdGet Get Knowledge By Id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiGetKnowledgeByIdApiV1KnowledgeIdGetRequest
*/
func (a *KnowledgeAPIService) GetKnowledgeByIdApiV1KnowledgeIdGet(ctx context.Context, id string) ApiGetKnowledgeByIdApiV1KnowledgeIdGetRequest {
	return ApiGetKnowledgeByIdApiV1KnowledgeIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KnowledgeFilesResponse
func (a *KnowledgeAPIService) GetKnowledgeByIdApiV1KnowledgeIdGetExecute(r ApiGetKnowledgeByIdApiV1KnowledgeIdGetRequest) (*KnowledgeFilesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeFilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeAPIService.GetKnowledgeByIdApiV1KnowledgeIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/knowledge/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetKnowledgeListApiV1KnowledgeListGetRequest struct {
	ctx context.Context
	ApiService *KnowledgeAPIService
}

func (r ApiGetKnowledgeListApiV1KnowledgeListGetRequest) Execute() ([]KnowledgeUserResponse, *http.Response, error) {
	return r.ApiService.GetKnowledgeListApiV1KnowledgeListGetExecute(r)
}

/*
GetKnowledgeListApiV1KnowledgeListGet Get Knowledge List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetKnowledgeListApiV1KnowledgeListGetRequest
*/
func (a *KnowledgeAPIService) GetKnowledgeListApiV1KnowledgeListGet(ctx context.Context) ApiGetKnowledgeListApiV1KnowledgeListGetRequest {
	return ApiGetKnowledgeListApiV1KnowledgeListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []KnowledgeUserResponse
func (a *KnowledgeAPIService) GetKnowledgeListApiV1KnowledgeListGetExecute(r ApiGetKnowledgeListApiV1KnowledgeListGetRequest) ([]KnowledgeUserResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KnowledgeUserResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeAPIService.GetKnowledgeListApiV1KnowledgeListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/knowledge/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostRequest struct {
	ctx context.Context
	ApiService *KnowledgeAPIService
	id string
	knowledgeFileIdForm *KnowledgeFileIdForm
}

func (r ApiRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostRequest) KnowledgeFileIdForm(knowledgeFileIdForm KnowledgeFileIdForm) ApiRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostRequest {
	r.knowledgeFileIdForm = &knowledgeFileIdForm
	return r
}

func (r ApiRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostRequest) Execute() (*KnowledgeFilesResponse, *http.Response, error) {
	return r.ApiService.RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostExecute(r)
}

/*
RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePost Remove File From Knowledge By Id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostRequest
*/
func (a *KnowledgeAPIService) RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePost(ctx context.Context, id string) ApiRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostRequest {
	return ApiRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KnowledgeFilesResponse
func (a *KnowledgeAPIService) RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostExecute(r ApiRemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePostRequest) (*KnowledgeFilesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeFilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeAPIService.RemoveFileFromKnowledgeByIdApiV1KnowledgeIdFileRemovePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/knowledge/{id}/file/remove"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.knowledgeFileIdForm == nil {
		return localVarReturnValue, nil, reportError("knowledgeFileIdForm is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.knowledgeFileIdForm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResetKnowledgeByIdApiV1KnowledgeIdResetPostRequest struct {
	ctx context.Context
	ApiService *KnowledgeAPIService
	id string
}

func (r ApiResetKnowledgeByIdApiV1KnowledgeIdResetPostRequest) Execute() (*KnowledgeResponse, *http.Response, error) {
	return r.ApiService.ResetKnowledgeByIdApiV1KnowledgeIdResetPostExecute(r)
}

/*
ResetKnowledgeByIdApiV1KnowledgeIdResetPost Reset Knowledge By Id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiResetKnowledgeByIdApiV1KnowledgeIdResetPostRequest
*/
func (a *KnowledgeAPIService) ResetKnowledgeByIdApiV1KnowledgeIdResetPost(ctx context.Context, id string) ApiResetKnowledgeByIdApiV1KnowledgeIdResetPostRequest {
	return ApiResetKnowledgeByIdApiV1KnowledgeIdResetPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KnowledgeResponse
func (a *KnowledgeAPIService) ResetKnowledgeByIdApiV1KnowledgeIdResetPostExecute(r ApiResetKnowledgeByIdApiV1KnowledgeIdResetPostRequest) (*KnowledgeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeAPIService.ResetKnowledgeByIdApiV1KnowledgeIdResetPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/knowledge/{id}/reset"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostRequest struct {
	ctx context.Context
	ApiService *KnowledgeAPIService
	id string
	knowledgeFileIdForm *KnowledgeFileIdForm
}

func (r ApiUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostRequest) KnowledgeFileIdForm(knowledgeFileIdForm KnowledgeFileIdForm) ApiUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostRequest {
	r.knowledgeFileIdForm = &knowledgeFileIdForm
	return r
}

func (r ApiUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostRequest) Execute() (*KnowledgeFilesResponse, *http.Response, error) {
	return r.ApiService.UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostExecute(r)
}

/*
UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePost Update File From Knowledge By Id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostRequest
*/
func (a *KnowledgeAPIService) UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePost(ctx context.Context, id string) ApiUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostRequest {
	return ApiUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KnowledgeFilesResponse
func (a *KnowledgeAPIService) UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostExecute(r ApiUpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePostRequest) (*KnowledgeFilesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeFilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeAPIService.UpdateFileFromKnowledgeByIdApiV1KnowledgeIdFileUpdatePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/knowledge/{id}/file/update"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.knowledgeFileIdForm == nil {
		return localVarReturnValue, nil, reportError("knowledgeFileIdForm is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.knowledgeFileIdForm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostRequest struct {
	ctx context.Context
	ApiService *KnowledgeAPIService
	id string
	knowledgeForm *KnowledgeForm
}

func (r ApiUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostRequest) KnowledgeForm(knowledgeForm KnowledgeForm) ApiUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostRequest {
	r.knowledgeForm = &knowledgeForm
	return r
}

func (r ApiUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostRequest) Execute() (*KnowledgeFilesResponse, *http.Response, error) {
	return r.ApiService.UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostExecute(r)
}

/*
UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePost Update Knowledge By Id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostRequest
*/
func (a *KnowledgeAPIService) UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePost(ctx context.Context, id string) ApiUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostRequest {
	return ApiUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KnowledgeFilesResponse
func (a *KnowledgeAPIService) UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostExecute(r ApiUpdateKnowledgeByIdApiV1KnowledgeIdUpdatePostRequest) (*KnowledgeFilesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeFilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeAPIService.UpdateKnowledgeByIdApiV1KnowledgeIdUpdatePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/knowledge/{id}/update"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.knowledgeForm == nil {
		return localVarReturnValue, nil, reportError("knowledgeForm is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.knowledgeForm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
