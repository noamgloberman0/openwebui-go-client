/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GeminiConfigForm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeminiConfigForm{}

// GeminiConfigForm struct for GeminiConfigForm
type GeminiConfigForm struct {
	GEMINI_API_BASE_URL string `json:"GEMINI_API_BASE_URL"`
	GEMINI_API_KEY string `json:"GEMINI_API_KEY"`
}

type _GeminiConfigForm GeminiConfigForm

// NewGeminiConfigForm instantiates a new GeminiConfigForm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeminiConfigForm(gEMINIAPIBASEURL string, gEMINIAPIKEY string) *GeminiConfigForm {
	this := GeminiConfigForm{}
	this.GEMINI_API_BASE_URL = gEMINIAPIBASEURL
	this.GEMINI_API_KEY = gEMINIAPIKEY
	return &this
}

// NewGeminiConfigFormWithDefaults instantiates a new GeminiConfigForm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeminiConfigFormWithDefaults() *GeminiConfigForm {
	this := GeminiConfigForm{}
	return &this
}

// GetGEMINI_API_BASE_URL returns the GEMINI_API_BASE_URL field value
func (o *GeminiConfigForm) GetGEMINI_API_BASE_URL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GEMINI_API_BASE_URL
}

// GetGEMINI_API_BASE_URLOk returns a tuple with the GEMINI_API_BASE_URL field value
// and a boolean to check if the value has been set.
func (o *GeminiConfigForm) GetGEMINI_API_BASE_URLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GEMINI_API_BASE_URL, true
}

// SetGEMINI_API_BASE_URL sets field value
func (o *GeminiConfigForm) SetGEMINI_API_BASE_URL(v string) {
	o.GEMINI_API_BASE_URL = v
}

// GetGEMINI_API_KEY returns the GEMINI_API_KEY field value
func (o *GeminiConfigForm) GetGEMINI_API_KEY() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GEMINI_API_KEY
}

// GetGEMINI_API_KEYOk returns a tuple with the GEMINI_API_KEY field value
// and a boolean to check if the value has been set.
func (o *GeminiConfigForm) GetGEMINI_API_KEYOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GEMINI_API_KEY, true
}

// SetGEMINI_API_KEY sets field value
func (o *GeminiConfigForm) SetGEMINI_API_KEY(v string) {
	o.GEMINI_API_KEY = v
}

func (o GeminiConfigForm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeminiConfigForm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["GEMINI_API_BASE_URL"] = o.GEMINI_API_BASE_URL
	toSerialize["GEMINI_API_KEY"] = o.GEMINI_API_KEY
	return toSerialize, nil
}

func (o *GeminiConfigForm) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"GEMINI_API_BASE_URL",
		"GEMINI_API_KEY",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGeminiConfigForm := _GeminiConfigForm{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGeminiConfigForm)

	if err != nil {
		return err
	}

	*o = GeminiConfigForm(varGeminiConfigForm)

	return err
}

type NullableGeminiConfigForm struct {
	value *GeminiConfigForm
	isSet bool
}

func (v NullableGeminiConfigForm) Get() *GeminiConfigForm {
	return v.value
}

func (v *NullableGeminiConfigForm) Set(val *GeminiConfigForm) {
	v.value = val
	v.isSet = true
}

func (v NullableGeminiConfigForm) IsSet() bool {
	return v.isSet
}

func (v *NullableGeminiConfigForm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeminiConfigForm(val *GeminiConfigForm) *NullableGeminiConfigForm {
	return &NullableGeminiConfigForm{value: val, isSet: true}
}

func (v NullableGeminiConfigForm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeminiConfigForm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


