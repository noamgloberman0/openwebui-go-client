/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QueryDocForm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryDocForm{}

// QueryDocForm struct for QueryDocForm
type QueryDocForm struct {
	CollectionName string `json:"collection_name"`
	Query string `json:"query"`
	K NullableInt32 `json:"k,omitempty"`
	R NullableFloat32 `json:"r,omitempty"`
	Hybrid NullableBool `json:"hybrid,omitempty"`
}

type _QueryDocForm QueryDocForm

// NewQueryDocForm instantiates a new QueryDocForm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryDocForm(collectionName string, query string) *QueryDocForm {
	this := QueryDocForm{}
	this.CollectionName = collectionName
	this.Query = query
	return &this
}

// NewQueryDocFormWithDefaults instantiates a new QueryDocForm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryDocFormWithDefaults() *QueryDocForm {
	this := QueryDocForm{}
	return &this
}

// GetCollectionName returns the CollectionName field value
func (o *QueryDocForm) GetCollectionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CollectionName
}

// GetCollectionNameOk returns a tuple with the CollectionName field value
// and a boolean to check if the value has been set.
func (o *QueryDocForm) GetCollectionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CollectionName, true
}

// SetCollectionName sets field value
func (o *QueryDocForm) SetCollectionName(v string) {
	o.CollectionName = v
}

// GetQuery returns the Query field value
func (o *QueryDocForm) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *QueryDocForm) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *QueryDocForm) SetQuery(v string) {
	o.Query = v
}

// GetK returns the K field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryDocForm) GetK() int32 {
	if o == nil || IsNil(o.K.Get()) {
		var ret int32
		return ret
	}
	return *o.K.Get()
}

// GetKOk returns a tuple with the K field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryDocForm) GetKOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.K.Get(), o.K.IsSet()
}

// HasK returns a boolean if a field has been set.
func (o *QueryDocForm) HasK() bool {
	if o != nil && o.K.IsSet() {
		return true
	}

	return false
}

// SetK gets a reference to the given NullableInt32 and assigns it to the K field.
func (o *QueryDocForm) SetK(v int32) {
	o.K.Set(&v)
}
// SetKNil sets the value for K to be an explicit nil
func (o *QueryDocForm) SetKNil() {
	o.K.Set(nil)
}

// UnsetK ensures that no value is present for K, not even an explicit nil
func (o *QueryDocForm) UnsetK() {
	o.K.Unset()
}

// GetR returns the R field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryDocForm) GetR() float32 {
	if o == nil || IsNil(o.R.Get()) {
		var ret float32
		return ret
	}
	return *o.R.Get()
}

// GetROk returns a tuple with the R field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryDocForm) GetROk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.R.Get(), o.R.IsSet()
}

// HasR returns a boolean if a field has been set.
func (o *QueryDocForm) HasR() bool {
	if o != nil && o.R.IsSet() {
		return true
	}

	return false
}

// SetR gets a reference to the given NullableFloat32 and assigns it to the R field.
func (o *QueryDocForm) SetR(v float32) {
	o.R.Set(&v)
}
// SetRNil sets the value for R to be an explicit nil
func (o *QueryDocForm) SetRNil() {
	o.R.Set(nil)
}

// UnsetR ensures that no value is present for R, not even an explicit nil
func (o *QueryDocForm) UnsetR() {
	o.R.Unset()
}

// GetHybrid returns the Hybrid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryDocForm) GetHybrid() bool {
	if o == nil || IsNil(o.Hybrid.Get()) {
		var ret bool
		return ret
	}
	return *o.Hybrid.Get()
}

// GetHybridOk returns a tuple with the Hybrid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryDocForm) GetHybridOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hybrid.Get(), o.Hybrid.IsSet()
}

// HasHybrid returns a boolean if a field has been set.
func (o *QueryDocForm) HasHybrid() bool {
	if o != nil && o.Hybrid.IsSet() {
		return true
	}

	return false
}

// SetHybrid gets a reference to the given NullableBool and assigns it to the Hybrid field.
func (o *QueryDocForm) SetHybrid(v bool) {
	o.Hybrid.Set(&v)
}
// SetHybridNil sets the value for Hybrid to be an explicit nil
func (o *QueryDocForm) SetHybridNil() {
	o.Hybrid.Set(nil)
}

// UnsetHybrid ensures that no value is present for Hybrid, not even an explicit nil
func (o *QueryDocForm) UnsetHybrid() {
	o.Hybrid.Unset()
}

func (o QueryDocForm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryDocForm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["collection_name"] = o.CollectionName
	toSerialize["query"] = o.Query
	if o.K.IsSet() {
		toSerialize["k"] = o.K.Get()
	}
	if o.R.IsSet() {
		toSerialize["r"] = o.R.Get()
	}
	if o.Hybrid.IsSet() {
		toSerialize["hybrid"] = o.Hybrid.Get()
	}
	return toSerialize, nil
}

func (o *QueryDocForm) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"collection_name",
		"query",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQueryDocForm := _QueryDocForm{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQueryDocForm)

	if err != nil {
		return err
	}

	*o = QueryDocForm(varQueryDocForm)

	return err
}

type NullableQueryDocForm struct {
	value *QueryDocForm
	isSet bool
}

func (v NullableQueryDocForm) Get() *QueryDocForm {
	return v.value
}

func (v *NullableQueryDocForm) Set(val *QueryDocForm) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryDocForm) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryDocForm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryDocForm(val *QueryDocForm) *NullableQueryDocForm {
	return &NullableQueryDocForm{value: val, isSet: true}
}

func (v NullableQueryDocForm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryDocForm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


