/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChunkParamUpdateForm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChunkParamUpdateForm{}

// ChunkParamUpdateForm struct for ChunkParamUpdateForm
type ChunkParamUpdateForm struct {
	TextSplitter NullableString `json:"text_splitter,omitempty"`
	ChunkSize int32 `json:"chunk_size"`
	ChunkOverlap int32 `json:"chunk_overlap"`
}

type _ChunkParamUpdateForm ChunkParamUpdateForm

// NewChunkParamUpdateForm instantiates a new ChunkParamUpdateForm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChunkParamUpdateForm(chunkSize int32, chunkOverlap int32) *ChunkParamUpdateForm {
	this := ChunkParamUpdateForm{}
	this.ChunkSize = chunkSize
	this.ChunkOverlap = chunkOverlap
	return &this
}

// NewChunkParamUpdateFormWithDefaults instantiates a new ChunkParamUpdateForm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChunkParamUpdateFormWithDefaults() *ChunkParamUpdateForm {
	this := ChunkParamUpdateForm{}
	return &this
}

// GetTextSplitter returns the TextSplitter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChunkParamUpdateForm) GetTextSplitter() string {
	if o == nil || IsNil(o.TextSplitter.Get()) {
		var ret string
		return ret
	}
	return *o.TextSplitter.Get()
}

// GetTextSplitterOk returns a tuple with the TextSplitter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChunkParamUpdateForm) GetTextSplitterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TextSplitter.Get(), o.TextSplitter.IsSet()
}

// HasTextSplitter returns a boolean if a field has been set.
func (o *ChunkParamUpdateForm) HasTextSplitter() bool {
	if o != nil && o.TextSplitter.IsSet() {
		return true
	}

	return false
}

// SetTextSplitter gets a reference to the given NullableString and assigns it to the TextSplitter field.
func (o *ChunkParamUpdateForm) SetTextSplitter(v string) {
	o.TextSplitter.Set(&v)
}
// SetTextSplitterNil sets the value for TextSplitter to be an explicit nil
func (o *ChunkParamUpdateForm) SetTextSplitterNil() {
	o.TextSplitter.Set(nil)
}

// UnsetTextSplitter ensures that no value is present for TextSplitter, not even an explicit nil
func (o *ChunkParamUpdateForm) UnsetTextSplitter() {
	o.TextSplitter.Unset()
}

// GetChunkSize returns the ChunkSize field value
func (o *ChunkParamUpdateForm) GetChunkSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ChunkSize
}

// GetChunkSizeOk returns a tuple with the ChunkSize field value
// and a boolean to check if the value has been set.
func (o *ChunkParamUpdateForm) GetChunkSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChunkSize, true
}

// SetChunkSize sets field value
func (o *ChunkParamUpdateForm) SetChunkSize(v int32) {
	o.ChunkSize = v
}

// GetChunkOverlap returns the ChunkOverlap field value
func (o *ChunkParamUpdateForm) GetChunkOverlap() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ChunkOverlap
}

// GetChunkOverlapOk returns a tuple with the ChunkOverlap field value
// and a boolean to check if the value has been set.
func (o *ChunkParamUpdateForm) GetChunkOverlapOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChunkOverlap, true
}

// SetChunkOverlap sets field value
func (o *ChunkParamUpdateForm) SetChunkOverlap(v int32) {
	o.ChunkOverlap = v
}

func (o ChunkParamUpdateForm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChunkParamUpdateForm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.TextSplitter.IsSet() {
		toSerialize["text_splitter"] = o.TextSplitter.Get()
	}
	toSerialize["chunk_size"] = o.ChunkSize
	toSerialize["chunk_overlap"] = o.ChunkOverlap
	return toSerialize, nil
}

func (o *ChunkParamUpdateForm) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chunk_size",
		"chunk_overlap",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChunkParamUpdateForm := _ChunkParamUpdateForm{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChunkParamUpdateForm)

	if err != nil {
		return err
	}

	*o = ChunkParamUpdateForm(varChunkParamUpdateForm)

	return err
}

type NullableChunkParamUpdateForm struct {
	value *ChunkParamUpdateForm
	isSet bool
}

func (v NullableChunkParamUpdateForm) Get() *ChunkParamUpdateForm {
	return v.value
}

func (v *NullableChunkParamUpdateForm) Set(val *ChunkParamUpdateForm) {
	v.value = val
	v.isSet = true
}

func (v NullableChunkParamUpdateForm) IsSet() bool {
	return v.isSet
}

func (v *NullableChunkParamUpdateForm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChunkParamUpdateForm(val *ChunkParamUpdateForm) *NullableChunkParamUpdateForm {
	return &NullableChunkParamUpdateForm{value: val, isSet: true}
}

func (v NullableChunkParamUpdateForm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChunkParamUpdateForm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


