/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SearchForm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchForm{}

// SearchForm struct for SearchForm
type SearchForm struct {
	CollectionName NullableString `json:"collection_name,omitempty"`
	Query string `json:"query"`
}

type _SearchForm SearchForm

// NewSearchForm instantiates a new SearchForm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchForm(query string) *SearchForm {
	this := SearchForm{}
	this.Query = query
	return &this
}

// NewSearchFormWithDefaults instantiates a new SearchForm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchFormWithDefaults() *SearchForm {
	this := SearchForm{}
	return &this
}

// GetCollectionName returns the CollectionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchForm) GetCollectionName() string {
	if o == nil || IsNil(o.CollectionName.Get()) {
		var ret string
		return ret
	}
	return *o.CollectionName.Get()
}

// GetCollectionNameOk returns a tuple with the CollectionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchForm) GetCollectionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CollectionName.Get(), o.CollectionName.IsSet()
}

// HasCollectionName returns a boolean if a field has been set.
func (o *SearchForm) HasCollectionName() bool {
	if o != nil && o.CollectionName.IsSet() {
		return true
	}

	return false
}

// SetCollectionName gets a reference to the given NullableString and assigns it to the CollectionName field.
func (o *SearchForm) SetCollectionName(v string) {
	o.CollectionName.Set(&v)
}
// SetCollectionNameNil sets the value for CollectionName to be an explicit nil
func (o *SearchForm) SetCollectionNameNil() {
	o.CollectionName.Set(nil)
}

// UnsetCollectionName ensures that no value is present for CollectionName, not even an explicit nil
func (o *SearchForm) UnsetCollectionName() {
	o.CollectionName.Unset()
}

// GetQuery returns the Query field value
func (o *SearchForm) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *SearchForm) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *SearchForm) SetQuery(v string) {
	o.Query = v
}

func (o SearchForm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchForm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CollectionName.IsSet() {
		toSerialize["collection_name"] = o.CollectionName.Get()
	}
	toSerialize["query"] = o.Query
	return toSerialize, nil
}

func (o *SearchForm) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"query",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchForm := _SearchForm{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchForm)

	if err != nil {
		return err
	}

	*o = SearchForm(varSearchForm)

	return err
}

type NullableSearchForm struct {
	value *SearchForm
	isSet bool
}

func (v NullableSearchForm) Get() *SearchForm {
	return v.value
}

func (v *NullableSearchForm) Set(val *SearchForm) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchForm) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchForm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchForm(val *SearchForm) *NullableSearchForm {
	return &NullableSearchForm{value: val, isSet: true}
}

func (v NullableSearchForm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchForm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


