/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


// PipelinesAPIService PipelinesAPI service
type PipelinesAPIService service

type ApiAddPipelineApiV1PipelinesAddPostRequest struct {
	ctx context.Context
	ApiService *PipelinesAPIService
	addPipelineForm *AddPipelineForm
}

func (r ApiAddPipelineApiV1PipelinesAddPostRequest) AddPipelineForm(addPipelineForm AddPipelineForm) ApiAddPipelineApiV1PipelinesAddPostRequest {
	r.addPipelineForm = &addPipelineForm
	return r
}

func (r ApiAddPipelineApiV1PipelinesAddPostRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.AddPipelineApiV1PipelinesAddPostExecute(r)
}

/*
AddPipelineApiV1PipelinesAddPost Add Pipeline

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAddPipelineApiV1PipelinesAddPostRequest
*/
func (a *PipelinesAPIService) AddPipelineApiV1PipelinesAddPost(ctx context.Context) ApiAddPipelineApiV1PipelinesAddPostRequest {
	return ApiAddPipelineApiV1PipelinesAddPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *PipelinesAPIService) AddPipelineApiV1PipelinesAddPostExecute(r ApiAddPipelineApiV1PipelinesAddPostRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PipelinesAPIService.AddPipelineApiV1PipelinesAddPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/pipelines/add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addPipelineForm == nil {
		return localVarReturnValue, nil, reportError("addPipelineForm is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addPipelineForm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeletePipelineApiV1PipelinesDeleteDeleteRequest struct {
	ctx context.Context
	ApiService *PipelinesAPIService
	deletePipelineForm *DeletePipelineForm
}

func (r ApiDeletePipelineApiV1PipelinesDeleteDeleteRequest) DeletePipelineForm(deletePipelineForm DeletePipelineForm) ApiDeletePipelineApiV1PipelinesDeleteDeleteRequest {
	r.deletePipelineForm = &deletePipelineForm
	return r
}

func (r ApiDeletePipelineApiV1PipelinesDeleteDeleteRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.DeletePipelineApiV1PipelinesDeleteDeleteExecute(r)
}

/*
DeletePipelineApiV1PipelinesDeleteDelete Delete Pipeline

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeletePipelineApiV1PipelinesDeleteDeleteRequest
*/
func (a *PipelinesAPIService) DeletePipelineApiV1PipelinesDeleteDelete(ctx context.Context) ApiDeletePipelineApiV1PipelinesDeleteDeleteRequest {
	return ApiDeletePipelineApiV1PipelinesDeleteDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *PipelinesAPIService) DeletePipelineApiV1PipelinesDeleteDeleteExecute(r ApiDeletePipelineApiV1PipelinesDeleteDeleteRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PipelinesAPIService.DeletePipelineApiV1PipelinesDeleteDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/pipelines/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deletePipelineForm == nil {
		return localVarReturnValue, nil, reportError("deletePipelineForm is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deletePipelineForm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPipelineValvesApiV1PipelinesPipelineIdValvesGetRequest struct {
	ctx context.Context
	ApiService *PipelinesAPIService
	pipelineId string
	urlIdx *int32
}

func (r ApiGetPipelineValvesApiV1PipelinesPipelineIdValvesGetRequest) UrlIdx(urlIdx int32) ApiGetPipelineValvesApiV1PipelinesPipelineIdValvesGetRequest {
	r.urlIdx = &urlIdx
	return r
}

func (r ApiGetPipelineValvesApiV1PipelinesPipelineIdValvesGetRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.GetPipelineValvesApiV1PipelinesPipelineIdValvesGetExecute(r)
}

/*
GetPipelineValvesApiV1PipelinesPipelineIdValvesGet Get Pipeline Valves

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pipelineId
 @return ApiGetPipelineValvesApiV1PipelinesPipelineIdValvesGetRequest
*/
func (a *PipelinesAPIService) GetPipelineValvesApiV1PipelinesPipelineIdValvesGet(ctx context.Context, pipelineId string) ApiGetPipelineValvesApiV1PipelinesPipelineIdValvesGetRequest {
	return ApiGetPipelineValvesApiV1PipelinesPipelineIdValvesGetRequest{
		ApiService: a,
		ctx: ctx,
		pipelineId: pipelineId,
	}
}

// Execute executes the request
//  @return interface{}
func (a *PipelinesAPIService) GetPipelineValvesApiV1PipelinesPipelineIdValvesGetExecute(r ApiGetPipelineValvesApiV1PipelinesPipelineIdValvesGetRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PipelinesAPIService.GetPipelineValvesApiV1PipelinesPipelineIdValvesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/pipelines/{pipeline_id}/valves"
	localVarPath = strings.Replace(localVarPath, "{"+"pipeline_id"+"}", url.PathEscape(parameterValueToString(r.pipelineId, "pipelineId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.urlIdx == nil {
		return localVarReturnValue, nil, reportError("urlIdx is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "urlIdx", r.urlIdx, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetRequest struct {
	ctx context.Context
	ApiService *PipelinesAPIService
	pipelineId string
	urlIdx *int32
}

func (r ApiGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetRequest) UrlIdx(urlIdx int32) ApiGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetRequest {
	r.urlIdx = &urlIdx
	return r
}

func (r ApiGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetExecute(r)
}

/*
GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGet Get Pipeline Valves Spec

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pipelineId
 @return ApiGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetRequest
*/
func (a *PipelinesAPIService) GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGet(ctx context.Context, pipelineId string) ApiGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetRequest {
	return ApiGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetRequest{
		ApiService: a,
		ctx: ctx,
		pipelineId: pipelineId,
	}
}

// Execute executes the request
//  @return interface{}
func (a *PipelinesAPIService) GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetExecute(r ApiGetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGetRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PipelinesAPIService.GetPipelineValvesSpecApiV1PipelinesPipelineIdValvesSpecGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/pipelines/{pipeline_id}/valves/spec"
	localVarPath = strings.Replace(localVarPath, "{"+"pipeline_id"+"}", url.PathEscape(parameterValueToString(r.pipelineId, "pipelineId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.urlIdx == nil {
		return localVarReturnValue, nil, reportError("urlIdx is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "urlIdx", r.urlIdx, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPipelinesApiV1PipelinesGetRequest struct {
	ctx context.Context
	ApiService *PipelinesAPIService
	urlIdx *int32
}

func (r ApiGetPipelinesApiV1PipelinesGetRequest) UrlIdx(urlIdx int32) ApiGetPipelinesApiV1PipelinesGetRequest {
	r.urlIdx = &urlIdx
	return r
}

func (r ApiGetPipelinesApiV1PipelinesGetRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.GetPipelinesApiV1PipelinesGetExecute(r)
}

/*
GetPipelinesApiV1PipelinesGet Get Pipelines

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetPipelinesApiV1PipelinesGetRequest
*/
func (a *PipelinesAPIService) GetPipelinesApiV1PipelinesGet(ctx context.Context) ApiGetPipelinesApiV1PipelinesGetRequest {
	return ApiGetPipelinesApiV1PipelinesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *PipelinesAPIService) GetPipelinesApiV1PipelinesGetExecute(r ApiGetPipelinesApiV1PipelinesGetRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PipelinesAPIService.GetPipelinesApiV1PipelinesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/pipelines/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.urlIdx != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "urlIdx", r.urlIdx, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPipelinesListApiV1PipelinesListGetRequest struct {
	ctx context.Context
	ApiService *PipelinesAPIService
}

func (r ApiGetPipelinesListApiV1PipelinesListGetRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.GetPipelinesListApiV1PipelinesListGetExecute(r)
}

/*
GetPipelinesListApiV1PipelinesListGet Get Pipelines List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetPipelinesListApiV1PipelinesListGetRequest
*/
func (a *PipelinesAPIService) GetPipelinesListApiV1PipelinesListGet(ctx context.Context) ApiGetPipelinesListApiV1PipelinesListGetRequest {
	return ApiGetPipelinesListApiV1PipelinesListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *PipelinesAPIService) GetPipelinesListApiV1PipelinesListGetExecute(r ApiGetPipelinesListApiV1PipelinesListGetRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PipelinesAPIService.GetPipelinesListApiV1PipelinesListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/pipelines/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostRequest struct {
	ctx context.Context
	ApiService *PipelinesAPIService
	pipelineId string
	urlIdx *int32
	body *map[string]interface{}
}

func (r ApiUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostRequest) UrlIdx(urlIdx int32) ApiUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostRequest {
	r.urlIdx = &urlIdx
	return r
}

func (r ApiUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostRequest) Body(body map[string]interface{}) ApiUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostRequest {
	r.body = &body
	return r
}

func (r ApiUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostExecute(r)
}

/*
UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePost Update Pipeline Valves

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pipelineId
 @return ApiUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostRequest
*/
func (a *PipelinesAPIService) UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePost(ctx context.Context, pipelineId string) ApiUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostRequest {
	return ApiUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostRequest{
		ApiService: a,
		ctx: ctx,
		pipelineId: pipelineId,
	}
}

// Execute executes the request
//  @return interface{}
func (a *PipelinesAPIService) UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostExecute(r ApiUpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePostRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PipelinesAPIService.UpdatePipelineValvesApiV1PipelinesPipelineIdValvesUpdatePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/pipelines/{pipeline_id}/valves/update"
	localVarPath = strings.Replace(localVarPath, "{"+"pipeline_id"+"}", url.PathEscape(parameterValueToString(r.pipelineId, "pipelineId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.urlIdx == nil {
		return localVarReturnValue, nil, reportError("urlIdx is required and must be specified")
	}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "urlIdx", r.urlIdx, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUploadPipelineApiV1PipelinesUploadPostRequest struct {
	ctx context.Context
	ApiService *PipelinesAPIService
	urlIdx *int32
	file *os.File
}

func (r ApiUploadPipelineApiV1PipelinesUploadPostRequest) UrlIdx(urlIdx int32) ApiUploadPipelineApiV1PipelinesUploadPostRequest {
	r.urlIdx = &urlIdx
	return r
}

func (r ApiUploadPipelineApiV1PipelinesUploadPostRequest) File(file *os.File) ApiUploadPipelineApiV1PipelinesUploadPostRequest {
	r.file = file
	return r
}

func (r ApiUploadPipelineApiV1PipelinesUploadPostRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.UploadPipelineApiV1PipelinesUploadPostExecute(r)
}

/*
UploadPipelineApiV1PipelinesUploadPost Upload Pipeline

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUploadPipelineApiV1PipelinesUploadPostRequest
*/
func (a *PipelinesAPIService) UploadPipelineApiV1PipelinesUploadPost(ctx context.Context) ApiUploadPipelineApiV1PipelinesUploadPostRequest {
	return ApiUploadPipelineApiV1PipelinesUploadPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *PipelinesAPIService) UploadPipelineApiV1PipelinesUploadPostExecute(r ApiUploadPipelineApiV1PipelinesUploadPostRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PipelinesAPIService.UploadPipelineApiV1PipelinesUploadPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/pipelines/upload"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.urlIdx == nil {
		return localVarReturnValue, nil, reportError("urlIdx is required and must be specified")
	}
	if r.file == nil {
		return localVarReturnValue, nil, reportError("file is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "urlIdx", r.urlIdx, "", "")
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"
	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
