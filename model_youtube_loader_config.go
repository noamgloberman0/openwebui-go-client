/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the YoutubeLoaderConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &YoutubeLoaderConfig{}

// YoutubeLoaderConfig struct for YoutubeLoaderConfig
type YoutubeLoaderConfig struct {
	Language []string `json:"language"`
	Translation NullableString `json:"translation,omitempty"`
	ProxyUrl *string `json:"proxy_url,omitempty"`
}

type _YoutubeLoaderConfig YoutubeLoaderConfig

// NewYoutubeLoaderConfig instantiates a new YoutubeLoaderConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewYoutubeLoaderConfig(language []string) *YoutubeLoaderConfig {
	this := YoutubeLoaderConfig{}
	this.Language = language
	var proxyUrl string = ""
	this.ProxyUrl = &proxyUrl
	return &this
}

// NewYoutubeLoaderConfigWithDefaults instantiates a new YoutubeLoaderConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewYoutubeLoaderConfigWithDefaults() *YoutubeLoaderConfig {
	this := YoutubeLoaderConfig{}
	var proxyUrl string = ""
	this.ProxyUrl = &proxyUrl
	return &this
}

// GetLanguage returns the Language field value
func (o *YoutubeLoaderConfig) GetLanguage() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *YoutubeLoaderConfig) GetLanguageOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Language, true
}

// SetLanguage sets field value
func (o *YoutubeLoaderConfig) SetLanguage(v []string) {
	o.Language = v
}

// GetTranslation returns the Translation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *YoutubeLoaderConfig) GetTranslation() string {
	if o == nil || IsNil(o.Translation.Get()) {
		var ret string
		return ret
	}
	return *o.Translation.Get()
}

// GetTranslationOk returns a tuple with the Translation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YoutubeLoaderConfig) GetTranslationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Translation.Get(), o.Translation.IsSet()
}

// HasTranslation returns a boolean if a field has been set.
func (o *YoutubeLoaderConfig) HasTranslation() bool {
	if o != nil && o.Translation.IsSet() {
		return true
	}

	return false
}

// SetTranslation gets a reference to the given NullableString and assigns it to the Translation field.
func (o *YoutubeLoaderConfig) SetTranslation(v string) {
	o.Translation.Set(&v)
}
// SetTranslationNil sets the value for Translation to be an explicit nil
func (o *YoutubeLoaderConfig) SetTranslationNil() {
	o.Translation.Set(nil)
}

// UnsetTranslation ensures that no value is present for Translation, not even an explicit nil
func (o *YoutubeLoaderConfig) UnsetTranslation() {
	o.Translation.Unset()
}

// GetProxyUrl returns the ProxyUrl field value if set, zero value otherwise.
func (o *YoutubeLoaderConfig) GetProxyUrl() string {
	if o == nil || IsNil(o.ProxyUrl) {
		var ret string
		return ret
	}
	return *o.ProxyUrl
}

// GetProxyUrlOk returns a tuple with the ProxyUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YoutubeLoaderConfig) GetProxyUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ProxyUrl) {
		return nil, false
	}
	return o.ProxyUrl, true
}

// HasProxyUrl returns a boolean if a field has been set.
func (o *YoutubeLoaderConfig) HasProxyUrl() bool {
	if o != nil && !IsNil(o.ProxyUrl) {
		return true
	}

	return false
}

// SetProxyUrl gets a reference to the given string and assigns it to the ProxyUrl field.
func (o *YoutubeLoaderConfig) SetProxyUrl(v string) {
	o.ProxyUrl = &v
}

func (o YoutubeLoaderConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o YoutubeLoaderConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["language"] = o.Language
	if o.Translation.IsSet() {
		toSerialize["translation"] = o.Translation.Get()
	}
	if !IsNil(o.ProxyUrl) {
		toSerialize["proxy_url"] = o.ProxyUrl
	}
	return toSerialize, nil
}

func (o *YoutubeLoaderConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"language",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varYoutubeLoaderConfig := _YoutubeLoaderConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varYoutubeLoaderConfig)

	if err != nil {
		return err
	}

	*o = YoutubeLoaderConfig(varYoutubeLoaderConfig)

	return err
}

type NullableYoutubeLoaderConfig struct {
	value *YoutubeLoaderConfig
	isSet bool
}

func (v NullableYoutubeLoaderConfig) Get() *YoutubeLoaderConfig {
	return v.value
}

func (v *NullableYoutubeLoaderConfig) Set(val *YoutubeLoaderConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableYoutubeLoaderConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableYoutubeLoaderConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableYoutubeLoaderConfig(val *YoutubeLoaderConfig) *NullableYoutubeLoaderConfig {
	return &NullableYoutubeLoaderConfig{value: val, isSet: true}
}

func (v NullableYoutubeLoaderConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableYoutubeLoaderConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


