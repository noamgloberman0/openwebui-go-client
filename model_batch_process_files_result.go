/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BatchProcessFilesResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchProcessFilesResult{}

// BatchProcessFilesResult struct for BatchProcessFilesResult
type BatchProcessFilesResult struct {
	FileId string `json:"file_id"`
	Status string `json:"status"`
	Error NullableString `json:"error,omitempty"`
}

type _BatchProcessFilesResult BatchProcessFilesResult

// NewBatchProcessFilesResult instantiates a new BatchProcessFilesResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchProcessFilesResult(fileId string, status string) *BatchProcessFilesResult {
	this := BatchProcessFilesResult{}
	this.FileId = fileId
	this.Status = status
	return &this
}

// NewBatchProcessFilesResultWithDefaults instantiates a new BatchProcessFilesResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchProcessFilesResultWithDefaults() *BatchProcessFilesResult {
	this := BatchProcessFilesResult{}
	return &this
}

// GetFileId returns the FileId field value
func (o *BatchProcessFilesResult) GetFileId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileId
}

// GetFileIdOk returns a tuple with the FileId field value
// and a boolean to check if the value has been set.
func (o *BatchProcessFilesResult) GetFileIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileId, true
}

// SetFileId sets field value
func (o *BatchProcessFilesResult) SetFileId(v string) {
	o.FileId = v
}

// GetStatus returns the Status field value
func (o *BatchProcessFilesResult) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *BatchProcessFilesResult) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *BatchProcessFilesResult) SetStatus(v string) {
	o.Status = v
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BatchProcessFilesResult) GetError() string {
	if o == nil || IsNil(o.Error.Get()) {
		var ret string
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BatchProcessFilesResult) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *BatchProcessFilesResult) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableString and assigns it to the Error field.
func (o *BatchProcessFilesResult) SetError(v string) {
	o.Error.Set(&v)
}
// SetErrorNil sets the value for Error to be an explicit nil
func (o *BatchProcessFilesResult) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *BatchProcessFilesResult) UnsetError() {
	o.Error.Unset()
}

func (o BatchProcessFilesResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchProcessFilesResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["file_id"] = o.FileId
	toSerialize["status"] = o.Status
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	return toSerialize, nil
}

func (o *BatchProcessFilesResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"file_id",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBatchProcessFilesResult := _BatchProcessFilesResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBatchProcessFilesResult)

	if err != nil {
		return err
	}

	*o = BatchProcessFilesResult(varBatchProcessFilesResult)

	return err
}

type NullableBatchProcessFilesResult struct {
	value *BatchProcessFilesResult
	isSet bool
}

func (v NullableBatchProcessFilesResult) Get() *BatchProcessFilesResult {
	return v.value
}

func (v *NullableBatchProcessFilesResult) Set(val *BatchProcessFilesResult) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchProcessFilesResult) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchProcessFilesResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchProcessFilesResult(val *BatchProcessFilesResult) *NullableBatchProcessFilesResult {
	return &NullableBatchProcessFilesResult{value: val, isSet: true}
}

func (v NullableBatchProcessFilesResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchProcessFilesResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


