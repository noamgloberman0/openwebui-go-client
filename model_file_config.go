/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FileConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileConfig{}

// FileConfig struct for FileConfig
type FileConfig struct {
	MaxSize NullableInt32 `json:"max_size,omitempty"`
	MaxCount NullableInt32 `json:"max_count,omitempty"`
}

// NewFileConfig instantiates a new FileConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileConfig() *FileConfig {
	this := FileConfig{}
	return &this
}

// NewFileConfigWithDefaults instantiates a new FileConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileConfigWithDefaults() *FileConfig {
	this := FileConfig{}
	return &this
}

// GetMaxSize returns the MaxSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileConfig) GetMaxSize() int32 {
	if o == nil || IsNil(o.MaxSize.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxSize.Get()
}

// GetMaxSizeOk returns a tuple with the MaxSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileConfig) GetMaxSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxSize.Get(), o.MaxSize.IsSet()
}

// HasMaxSize returns a boolean if a field has been set.
func (o *FileConfig) HasMaxSize() bool {
	if o != nil && o.MaxSize.IsSet() {
		return true
	}

	return false
}

// SetMaxSize gets a reference to the given NullableInt32 and assigns it to the MaxSize field.
func (o *FileConfig) SetMaxSize(v int32) {
	o.MaxSize.Set(&v)
}
// SetMaxSizeNil sets the value for MaxSize to be an explicit nil
func (o *FileConfig) SetMaxSizeNil() {
	o.MaxSize.Set(nil)
}

// UnsetMaxSize ensures that no value is present for MaxSize, not even an explicit nil
func (o *FileConfig) UnsetMaxSize() {
	o.MaxSize.Unset()
}

// GetMaxCount returns the MaxCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileConfig) GetMaxCount() int32 {
	if o == nil || IsNil(o.MaxCount.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxCount.Get()
}

// GetMaxCountOk returns a tuple with the MaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileConfig) GetMaxCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxCount.Get(), o.MaxCount.IsSet()
}

// HasMaxCount returns a boolean if a field has been set.
func (o *FileConfig) HasMaxCount() bool {
	if o != nil && o.MaxCount.IsSet() {
		return true
	}

	return false
}

// SetMaxCount gets a reference to the given NullableInt32 and assigns it to the MaxCount field.
func (o *FileConfig) SetMaxCount(v int32) {
	o.MaxCount.Set(&v)
}
// SetMaxCountNil sets the value for MaxCount to be an explicit nil
func (o *FileConfig) SetMaxCountNil() {
	o.MaxCount.Set(nil)
}

// UnsetMaxCount ensures that no value is present for MaxCount, not even an explicit nil
func (o *FileConfig) UnsetMaxCount() {
	o.MaxCount.Unset()
}

func (o FileConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.MaxSize.IsSet() {
		toSerialize["max_size"] = o.MaxSize.Get()
	}
	if o.MaxCount.IsSet() {
		toSerialize["max_count"] = o.MaxCount.Get()
	}
	return toSerialize, nil
}

type NullableFileConfig struct {
	value *FileConfig
	isSet bool
}

func (v NullableFileConfig) Get() *FileConfig {
	return v.value
}

func (v *NullableFileConfig) Set(val *FileConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableFileConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableFileConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileConfig(val *FileConfig) *NullableFileConfig {
	return &NullableFileConfig{value: val, isSet: true}
}

func (v NullableFileConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


