/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Reactions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Reactions{}

// Reactions struct for Reactions
type Reactions struct {
	Name string `json:"name"`
	UserIds []string `json:"user_ids"`
	Count int32 `json:"count"`
}

type _Reactions Reactions

// NewReactions instantiates a new Reactions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReactions(name string, userIds []string, count int32) *Reactions {
	this := Reactions{}
	this.Name = name
	this.UserIds = userIds
	this.Count = count
	return &this
}

// NewReactionsWithDefaults instantiates a new Reactions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReactionsWithDefaults() *Reactions {
	this := Reactions{}
	return &this
}

// GetName returns the Name field value
func (o *Reactions) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Reactions) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Reactions) SetName(v string) {
	o.Name = v
}

// GetUserIds returns the UserIds field value
func (o *Reactions) GetUserIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value
// and a boolean to check if the value has been set.
func (o *Reactions) GetUserIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserIds, true
}

// SetUserIds sets field value
func (o *Reactions) SetUserIds(v []string) {
	o.UserIds = v
}

// GetCount returns the Count field value
func (o *Reactions) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *Reactions) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *Reactions) SetCount(v int32) {
	o.Count = v
}

func (o Reactions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Reactions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["user_ids"] = o.UserIds
	toSerialize["count"] = o.Count
	return toSerialize, nil
}

func (o *Reactions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"user_ids",
		"count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReactions := _Reactions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReactions)

	if err != nil {
		return err
	}

	*o = Reactions(varReactions)

	return err
}

type NullableReactions struct {
	value *Reactions
	isSet bool
}

func (v NullableReactions) Get() *Reactions {
	return v.value
}

func (v *NullableReactions) Set(val *Reactions) {
	v.value = val
	v.isSet = true
}

func (v NullableReactions) IsSet() bool {
	return v.isSet
}

func (v *NullableReactions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReactions(val *Reactions) *NullableReactions {
	return &NullableReactions{value: val, isSet: true}
}

func (v NullableReactions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReactions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


